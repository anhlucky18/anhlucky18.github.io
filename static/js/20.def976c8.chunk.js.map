{"version":3,"sources":["hooks/useIsMountedRef.js","views/auth/RegisterView/Auth0Register.js","views/auth/RegisterView/FirebaseAuthRegister.js","views/auth/RegisterView/JWTRegister.js","views/auth/RegisterView/index.js","views/auth/RegisterView/SSORegister.js"],"names":["useIsMountedRef","isMounted","useRef","useEffect","current","useStyles","makeStyles","root","Auth0Register","className","rest","classes","loginWithPopup","useAuth","useState","error","setError","isMountedRef","handleRegister","a","console","message","clsx","Box","my","FormHelperText","display","justifyContent","Button","onClick","variant","color","theme","googleButton","backgroundColor","palette","common","white","providerIcon","marginRight","spacing","divider","flexGrow","dividerText","margin","FirebaseAuthRegister","createUserWithEmailAndPassword","signInWithGoogle","handleGoogleClick","fullWidth","size","alt","src","alignItems","mt","Divider","orientation","Typography","initialValues","email","password","policy","submit","validationSchema","Yup","shape","max","required","min","oneOf","onSubmit","values","setErrors","setStatus","setSubmitting","success","errors","handleBlur","handleChange","handleSubmit","isSubmitting","touched","noValidate","TextField","Boolean","helperText","label","name","onBlur","onChange","type","value","ml","Checkbox","checked","Link","component","href","disabled","JWTRegister","register","methodIcons","background","dark","flexDirection","minHeight","banner","paper","paddingBottom","paddingTop","borderBottom","bannerChip","methodIcon","height","marginLeft","cardContainer","cardContent","padding","currentMethodIcon","width","maxHeight","RegisterView","method","Page","title","Container","maxWidth","Chip","RouterLink","to","Tooltip","mb","Logo","Card","CardContent","gutterBottom"],"mappings":"gKAAA,WAYeA,IAVS,WACtB,IAAMC,EAAYC,kBAAO,GAMzB,OAJAC,qBAAU,kBAAM,WACdF,EAAUG,SAAU,KACnB,IAEIH,I,0QCGHI,EAAYC,aAAW,iBAAO,CAClCC,KAAM,OAoDOC,EAjDO,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,UAAcC,EAAW,6BAC1CC,EAAUN,IACRO,EAAmBC,cAAnBD,eAFwC,EAGtBE,mBAAS,MAHa,mBAGzCC,EAHyC,KAGlCC,EAHkC,KAI1CC,EAAejB,cAEfkB,EAAc,uCAAG,sBAAAC,EAAA,+EAEbP,IAFa,sDAInBQ,QAAQL,MAAR,MACIE,EAAab,SACfY,EAAS,KAAIK,SANI,wDAAH,qDAWpB,OACE,uCACEZ,UAAWa,kBAAKX,EAAQJ,KAAME,IAC1BC,GAEHK,GACC,kBAACQ,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACC,EAAA,EAAD,CAAgBV,OAAK,GAClBA,IAIP,kBAACQ,EAAA,EAAD,CACEG,QAAQ,OACRC,eAAe,UAEf,kBAACC,EAAA,EAAD,CACEC,QAASX,EACTY,QAAQ,YACRC,MAAM,aAHR,0B,wCC9BF1B,EAAYC,aAAW,SAAC0B,GAAD,MAAY,CACvCzB,KAAM,GACN0B,aAAc,CACZC,gBAAiBF,EAAMG,QAAQC,OAAOC,OAExCC,aAAc,CACZC,YAAaP,EAAMQ,QAAQ,IAE7BC,QAAS,CACPC,SAAU,GAEZC,YAAa,CACXC,OAAQZ,EAAMQ,QAAQ,QA8LXK,EA1Lc,SAAC,GAA4B,IAA1BpC,EAAyB,EAAzBA,UAAcC,EAAW,6BACjDC,EAAUN,IADuC,EAEMQ,cAArDiC,EAF+C,EAE/CA,+BAAgCC,EAFe,EAEfA,iBAClC9B,EAAejB,cAEfgD,EAAiB,uCAAG,sBAAA7B,EAAA,+EAEhB4B,IAFgB,sDAItB3B,QAAQL,MAAR,MAJsB,wDAAH,qDAQvB,OACE,oCACE,kBAACa,EAAA,EAAD,CACEnB,UAAWE,EAAQsB,aACnBgB,WAAS,EACTpB,QAASmB,EACTE,KAAK,QACLpB,QAAQ,aAER,yBACEqB,IAAI,SACJ1C,UAAWE,EAAQ2B,aACnBc,IAAI,8BAVR,wBAcA,kBAAC7B,EAAA,EAAD,CACE8B,WAAW,SACX3B,QAAQ,OACR4B,GAAI,GAEJ,kBAACC,EAAA,EAAD,CACE9C,UAAWE,EAAQ8B,QACnBe,YAAY,eAEd,kBAACC,EAAA,EAAD,CACE1B,MAAM,gBACND,QAAQ,QACRrB,UAAWE,EAAQgC,aAHrB,MAOA,kBAACY,EAAA,EAAD,CACE9C,UAAWE,EAAQ8B,QACnBe,YAAY,gBAGhB,kBAAC,IAAD,CACEE,cAAe,CACbC,MAAO,GACPC,SAAU,GACVC,QAAQ,EACRC,OAAQ,MAEVC,iBAAkBC,MAAaC,MAAM,CACnCN,MAAOK,MAAaL,MAAM,yBAAyBO,IAAI,KAAKC,SAAS,qBACrEP,SAAUI,MAAaI,IAAI,GAAGF,IAAI,KAAKC,SAAS,wBAChDN,OAAQG,MAAcK,MAAM,EAAC,GAAO,gCAEtCC,SAAQ,uCAAE,WAAOC,EAAP,sBAAApD,EAAA,6DACRqD,EADQ,EACRA,UACAC,EAFQ,EAERA,UACAC,EAHQ,EAGRA,cAHQ,kBAMA5B,EAA+ByB,EAAOZ,MAAOY,EAAOX,UANpD,OAQF3C,EAAab,UACfqE,EAAU,CAAEE,SAAS,IACrBD,GAAc,IAVV,gDAaNtD,QAAQL,MAAR,MACIE,EAAab,UACfqE,EAAU,CAAEE,SAAS,IACrBH,EAAU,CAAEV,OAAQ,KAAIzC,UACxBqD,GAAc,IAjBV,yDAAF,0DAsBP,gBACCE,EADD,EACCA,OACAC,EAFD,EAECA,WACAC,EAHD,EAGCA,aACAC,EAJD,EAICA,aACAC,EALD,EAKCA,aACAC,EAND,EAMCA,QACAV,EAPD,EAOCA,OAPD,OASC,wCACEW,YAAU,EACVzE,UAAWa,kBAAKX,EAAQJ,KAAME,GAC9B6D,SAAUS,GACNrE,GAEJ,kBAACyE,EAAA,EAAD,CACEpE,MAAOqE,QAAQH,EAAQtB,OAASiB,EAAOjB,OACvCV,WAAS,EACToC,WAAYJ,EAAQtB,OAASiB,EAAOjB,MACpC2B,MAAM,gBACN1C,OAAO,SACP2C,KAAK,QACLC,OAAQX,EACRY,SAAUX,EACVY,KAAK,QACLC,MAAOpB,EAAOZ,MACd7B,QAAQ,aAEV,kBAACqD,EAAA,EAAD,CACEpE,MAAOqE,QAAQH,EAAQrB,UAAYgB,EAAOhB,UAC1CX,WAAS,EACToC,WAAYJ,EAAQrB,UAAYgB,EAAOhB,SACvC0B,MAAM,WACN1C,OAAO,SACP2C,KAAK,WACLC,OAAQX,EACRY,SAAUX,EACVY,KAAK,WACLC,MAAOpB,EAAOX,SACd9B,QAAQ,aAEV,kBAACP,EAAA,EAAD,CACE8B,WAAW,SACX3B,QAAQ,OACR4B,GAAI,EACJsC,IAAK,GAEL,kBAACC,EAAA,EAAD,CACEC,QAASvB,EAAOV,OAChB0B,KAAK,SACLE,SAAUX,IAEZ,kBAACrB,EAAA,EAAD,CACE3B,QAAQ,QACRC,MAAM,iBAFR,kBAKG,IACD,kBAACgE,EAAA,EAAD,CACEC,UAAU,IACVC,KAAK,IACLlE,MAAM,aAHR,0BASHqD,QAAQH,EAAQpB,QAAUe,EAAOf,SAChC,kBAACpC,EAAA,EAAD,CAAgBV,OAAK,GAClB6D,EAAOf,QAGXe,EAAOd,QACN,kBAACvC,EAAA,EAAD,CAAK+B,GAAI,GACP,kBAAC7B,EAAA,EAAD,CAAgBV,OAAK,GAClB6D,EAAOd,SAId,kBAACvC,EAAA,EAAD,CAAK+B,GAAI,GACP,kBAAC1B,EAAA,EAAD,CACEG,MAAM,YACNmE,SAAUlB,EACV/B,WAAS,EACTC,KAAK,QACLwC,KAAK,SACL5D,QAAQ,aANV,mBCrLRzB,EAAYC,aAAW,iBAAO,CAClCC,KAAM,OA4JO4F,EAzJK,SAAC,GAA4B,IAA1B1F,EAAyB,EAAzBA,UAAcC,EAAW,6BACxCC,EAAUN,IACR+F,EAAavF,cAAbuF,SACFnF,EAAejB,cAErB,OACE,kBAAC,IAAD,CACE0D,cAAe,CACbC,MAAO,GACP4B,KAAM,GACN3B,SAAU,GACVC,QAAQ,EACRC,OAAQ,MAEVC,iBAAkBC,MAAaC,MAAM,CACnCN,MAAOK,MAAaL,MAAM,yBAAyBO,IAAI,KAAKC,SAAS,qBACrEoB,KAAMvB,MAAaE,IAAI,KAAKC,SAAS,oBACrCP,SAAUI,MAAaI,IAAI,GAAGF,IAAI,KAAKC,SAAS,wBAChDN,OAAQG,MAAcK,MAAM,EAAC,GAAO,gCAEtCC,SAAQ,uCAAE,WAAOC,EAAP,sBAAApD,EAAA,6DACRqD,EADQ,EACRA,UACAC,EAFQ,EAERA,UACAC,EAHQ,EAGRA,cAHQ,kBAMA0B,EAAS7B,EAAOZ,MAAOY,EAAOgB,KAAMhB,EAAOX,UAN3C,OAQF3C,EAAab,UACfqE,EAAU,CAAEE,SAAS,IACrBD,GAAc,IAVV,gDAaNtD,QAAQL,MAAR,MACA0D,EAAU,CAAEE,SAAS,IACrBH,EAAU,CAAEV,OAAQ,KAAIzC,UACxBqD,GAAc,GAhBR,yDAAF,0DAoBP,gBACCE,EADD,EACCA,OACAC,EAFD,EAECA,WACAC,EAHD,EAGCA,aACAC,EAJD,EAICA,aACAC,EALD,EAKCA,aACAC,EAND,EAMCA,QACAV,EAPD,EAOCA,OAPD,OASC,wCACEW,YAAU,EACVzE,UAAWa,kBAAKX,EAAQJ,KAAME,GAC9B6D,SAAUS,GACNrE,GAEJ,kBAACyE,EAAA,EAAD,CACEpE,MAAOqE,QAAQH,EAAQM,MAAQX,EAAOW,MACtCtC,WAAS,EACToC,WAAYJ,EAAQM,MAAQX,EAAOW,KACnCD,MAAM,OACN1C,OAAO,SACP2C,KAAK,OACLC,OAAQX,EACRY,SAAUX,EACVa,MAAOpB,EAAOgB,KACdzD,QAAQ,aAEV,kBAACqD,EAAA,EAAD,CACEpE,MAAOqE,QAAQH,EAAQtB,OAASiB,EAAOjB,OACvCV,WAAS,EACToC,WAAYJ,EAAQtB,OAASiB,EAAOjB,MACpC2B,MAAM,gBACN1C,OAAO,SACP2C,KAAK,QACLC,OAAQX,EACRY,SAAUX,EACVY,KAAK,QACLC,MAAOpB,EAAOZ,MACd7B,QAAQ,aAEV,kBAACqD,EAAA,EAAD,CACEpE,MAAOqE,QAAQH,EAAQrB,UAAYgB,EAAOhB,UAC1CX,WAAS,EACToC,WAAYJ,EAAQrB,UAAYgB,EAAOhB,SACvC0B,MAAM,WACN1C,OAAO,SACP2C,KAAK,WACLC,OAAQX,EACRY,SAAUX,EACVY,KAAK,WACLC,MAAOpB,EAAOX,SACd9B,QAAQ,aAEV,kBAACP,EAAA,EAAD,CACE8B,WAAW,SACX3B,QAAQ,OACR4B,GAAI,EACJsC,IAAK,GAEL,kBAACC,EAAA,EAAD,CACEC,QAASvB,EAAOV,OAChB0B,KAAK,SACLE,SAAUX,IAEZ,kBAACrB,EAAA,EAAD,CACE3B,QAAQ,QACRC,MAAM,iBAFR,kBAKG,IACD,kBAACgE,EAAA,EAAD,CACEC,UAAU,IACVC,KAAK,IACLlE,MAAM,aAHR,0BASHqD,QAAQH,EAAQpB,QAAUe,EAAOf,SAChC,kBAACpC,EAAA,EAAD,CAAgBV,OAAK,GAClB6D,EAAOf,QAGXe,EAAOd,QACN,kBAACvC,EAAA,EAAD,CAAK+B,GAAI,GACP,kBAAC7B,EAAA,EAAD,CAAgBV,OAAK,GAClB6D,EAAOd,SAId,kBAACvC,EAAA,EAAD,CAAK+B,GAAI,GACP,kBAAC1B,EAAA,EAAD,CACEG,MAAM,YACNmE,SAAUlB,EACV/B,WAAS,EACTC,KAAK,QACLwC,KAAK,SACL5D,QAAQ,aANV,kBCpINuE,GCHY/F,aAAW,SAAC0B,GAAD,MAAY,CACrCzB,KAAM,GACN0B,aAAc,CACVC,gBAAiBF,EAAMG,QAAQC,OAAOC,OAE1CC,aAAc,CACVC,YAAaP,EAAMQ,QAAQ,IAE/BC,QAAS,CACLC,SAAU,GAEdC,YAAa,CACTC,OAAQZ,EAAMQ,QAAQ,QDTV,CAClB,MAAS,2BACT,aAAgB,8BAChB,IAAO,2BAGHnC,EAAYC,aAAW,SAAC0B,GAAD,MAAY,CACvCzB,KAAM,CACJ2B,gBAAiBF,EAAMG,QAAQmE,WAAWC,KAC1C7E,QAAS,OACT8E,cAAe,SACfC,UAAW,SAEbC,OAAQ,CACNxE,gBAAiBF,EAAMG,QAAQmE,WAAWK,MAC1CC,cAAe5E,EAAMQ,QAAQ,GAC7BqE,WAAY7E,EAAMQ,QAAQ,GAC1BsE,aAAa,aAAD,OAAe9E,EAAMG,QAAQM,UAE3CsE,WAAY,CACVxE,YAAaP,EAAMQ,QAAQ,IAE7BwE,WAAY,CACVC,OAAQ,GACRC,WAAYlF,EAAMQ,QAAQ,GAC1BD,YAAaP,EAAMQ,QAAQ,IAE7B2E,cAAe,CACbP,cAAe,GACfC,WAAY,IAEdO,YAAa,CACXC,QAASrF,EAAMQ,QAAQ,GACvBd,QAAS,OACT8E,cAAe,SACfC,UAAW,KAEba,kBAAmB,CACjBL,OAAQ,GACR,UAAW,CACTM,MAAO,OACPC,UAAW,aA4IFC,UAvIM,WACnB,IAAM9G,EAAUN,IACRqH,EAAW7G,cAAX6G,OAER,OACE,kBAACC,EAAA,EAAD,CACElH,UAAWE,EAAQJ,KACnBqH,MAAM,YAEN,yBAAKnH,UAAWE,EAAQ+F,QACtB,kBAACmB,EAAA,EAAD,CAAWC,SAAS,MAClB,kBAACvG,EAAA,EAAD,CACE8B,WAAW,SACX3B,QAAQ,OACRC,eAAe,UAEf,kBAACoG,EAAA,EAAD,CACEhG,MAAM,YACNuD,MAAM,MACNpC,KAAK,QACLzC,UAAWE,EAAQoG,aAErB,kBAACxF,EAAA,EAAD,CACE8B,WAAW,SACX3B,QAAQ,QAER,kBAAC+B,EAAA,EAAD,CACE1B,MAAM,cACND,QAAQ,MAFV,YAKG,IACD,kBAACiE,EAAA,EAAD,CACEC,UAAWgC,IACXC,GAAG,SAFL,QAMC,IAZH,sCAeA,kBAACC,EAAA,EAAD,CAASN,MAAM,SACb,yBACEzE,IAAI,QACJ1C,UAAWE,EAAQqG,WACnB5D,IAAKiD,EAAW,SAGpB,kBAAC6B,EAAA,EAAD,CAASN,MAAM,YACb,yBACEzE,IAAI,WACJ1C,UAAWE,EAAQqG,WACnB5D,IAAKiD,EAAW,gBAGpB,kBAAC6B,EAAA,EAAD,CAASN,MAAM,kBACb,yBACEzE,IAAI,MACJ1C,UAAWE,EAAQqG,WACnB5D,IAAKiD,EAAW,WAO5B,kBAACwB,EAAA,EAAD,CACEpH,UAAWE,EAAQwG,cACnBW,SAAS,MAET,kBAACvG,EAAA,EAAD,CACE4G,GAAI,EACJzG,QAAQ,OACRC,eAAe,UAEf,kBAAC,IAAD,CAAYsG,GAAG,KACb,kBAACG,EAAA,EAAD,QAGJ,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAa7H,UAAWE,EAAQyG,aAC9B,kBAAC7F,EAAA,EAAD,CACE8B,WAAW,SACX3B,QAAQ,OACRC,eAAe,gBACfwG,GAAI,GAEJ,6BACE,kBAAC1E,EAAA,EAAD,CACE1B,MAAM,cACNwG,cAAY,EACZzG,QAAQ,MAHV,YAOA,kBAAC2B,EAAA,EAAD,CACE3B,QAAQ,QACRC,MAAM,iBAFR,sCAOF,yBAAKtB,UAAWE,EAAQ2G,mBACtB,yBACEnE,IAAI,cACJC,IAAKiD,EAAYqB,OAIvB,kBAACnG,EAAA,EAAD,CACEmB,SAAU,EACVY,GAAI,GAEQ,UAAXoE,GAAsB,kBAAC,EAAD,MACX,iBAAXA,GAA6B,kBAAC,EAAD,MAClB,QAAXA,GAAoB,kBAAC,EAAD,OAEvB,kBAACnG,EAAA,EAAD,CAAKC,GAAI,GACP,kBAAC+B,EAAA,EAAD,OAEF,kBAACwC,EAAA,EAAD,CACEC,UAAWgC,IACXC,GAAG,SACHnG,QAAQ,QACRC,MAAM,iBAJR","file":"static/js/20.def976c8.chunk.js","sourcesContent":["import {useRef, useEffect } from 'react';\n\nconst useIsMountedRef = () => {\n  const isMounted = useRef(true);\n\n  useEffect(() => () => {\n    isMounted.current = false;\n  }, []);\n\n  return isMounted;\n};\n\nexport default useIsMountedRef;\n","import React, { useState } from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport {\n  Box,\n  Button,\n  FormHelperText,\n  makeStyles\n} from '@material-ui/core';\nimport useAuth from 'src/hooks/useAuth';\nimport useIsMountedRef from 'src/hooks/useIsMountedRef';\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nconst Auth0Register = ({ className, ...rest }) => {\n  const classes = useStyles();\n  const { loginWithPopup } = useAuth();\n  const [error, setError] = useState(null);\n  const isMountedRef = useIsMountedRef();\n\n  const handleRegister = async () => {\n    try {\n      await loginWithPopup();\n    } catch (err) {\n      console.error(err);\n      if (isMountedRef.current) {\n        setError(err.message);\n      }\n    }\n  };\n\n  return (\n    <div\n      className={clsx(classes.root, className)}\n      {...rest}\n    >\n      {error && (\n        <Box my={3}>\n          <FormHelperText error>\n            {error}\n          </FormHelperText>\n        </Box>\n      )}\n      <Box\n        display=\"flex\"\n        justifyContent=\"center\"\n      >\n        <Button\n          onClick={handleRegister}\n          variant=\"contained\"\n          color=\"secondary\"\n        >\n          Register with Auth0\n        </Button>\n      </Box>\n    </div>\n  );\n};\n\nAuth0Register.propTypes = {\n  className: PropTypes.string\n};\n\nexport default Auth0Register;\n","import React from 'react';\nimport clsx from 'clsx';\nimport * as Yup from 'yup';\nimport PropTypes from 'prop-types';\nimport { Formik } from 'formik';\nimport {\n  Box,\n  Button,\n  Checkbox,\n  Divider,\n  FormHelperText,\n  Link,\n  TextField,\n  Typography,\n  makeStyles\n} from '@material-ui/core';\nimport useAuth from 'src/hooks/useAuth';\nimport useIsMountedRef from 'src/hooks/useIsMountedRef';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  googleButton: {\n    backgroundColor: theme.palette.common.white\n  },\n  providerIcon: {\n    marginRight: theme.spacing(2)\n  },\n  divider: {\n    flexGrow: 1\n  },\n  dividerText: {\n    margin: theme.spacing(2)\n  }\n}));\n\nconst FirebaseAuthRegister = ({ className, ...rest }) => {\n  const classes = useStyles();\n  const { createUserWithEmailAndPassword, signInWithGoogle } = useAuth();\n  const isMountedRef = useIsMountedRef();\n\n  const handleGoogleClick = async () => {\n    try {\n      await signInWithGoogle();\n    } catch(err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <Button\n        className={classes.googleButton}\n        fullWidth\n        onClick={handleGoogleClick}\n        size=\"large\"\n        variant=\"contained\"\n      >\n        <img\n          alt=\"Google\"\n          className={classes.providerIcon}\n          src=\"/static/images/google.svg\"\n        />\n        Register with Google\n      </Button>\n      <Box\n        alignItems=\"center\"\n        display=\"flex\"\n        mt={2}\n      >\n        <Divider\n          className={classes.divider}\n          orientation=\"horizontal\"\n        />\n        <Typography \n          color=\"textSecondary\"\n          variant=\"body1\"\n          className={classes.dividerText}\n        >\n          OR\n        </Typography>\n        <Divider\n          className={classes.divider}\n          orientation=\"horizontal\"\n        />\n      </Box>\n      <Formik\n        initialValues={{\n          email: '',\n          password: '',\n          policy: true,\n          submit: null\n        }}\n        validationSchema={Yup.object().shape({\n          email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\n          password: Yup.string().min(7).max(255).required('Password is required'),\n          policy: Yup.boolean().oneOf([true], 'This field must be checked')\n        })}\n        onSubmit={async (values, {\n          setErrors,\n          setStatus,\n          setSubmitting\n        }) => {\n          try {\n            await createUserWithEmailAndPassword(values.email, values.password);\n\n            if (isMountedRef.current) {\n              setStatus({ success: true });\n              setSubmitting(false);\n            }\n          } catch (err) {\n            console.error(err);\n            if (isMountedRef.current) {\n              setStatus({ success: false });\n              setErrors({ submit: err.message });\n              setSubmitting(false);\n            }\n          }\n        }}\n      >\n        {({\n          errors,\n          handleBlur,\n          handleChange,\n          handleSubmit,\n          isSubmitting,\n          touched,\n          values\n        }) => (\n          <form\n            noValidate\n            className={clsx(classes.root, className)}\n            onSubmit={handleSubmit}\n            {...rest}\n          >\n            <TextField\n              error={Boolean(touched.email && errors.email)}\n              fullWidth\n              helperText={touched.email && errors.email}\n              label=\"Email Address\"\n              margin=\"normal\"\n              name=\"email\"\n              onBlur={handleBlur}\n              onChange={handleChange}\n              type=\"email\"\n              value={values.email}\n              variant=\"outlined\"\n            />\n            <TextField\n              error={Boolean(touched.password && errors.password)}\n              fullWidth\n              helperText={touched.password && errors.password}\n              label=\"Password\"\n              margin=\"normal\"\n              name=\"password\"\n              onBlur={handleBlur}\n              onChange={handleChange}\n              type=\"password\"\n              value={values.password}\n              variant=\"outlined\"\n            />\n            <Box\n              alignItems=\"center\"\n              display=\"flex\"\n              mt={2}\n              ml={-1}\n            >\n              <Checkbox\n                checked={values.policy}\n                name=\"policy\"\n                onChange={handleChange}\n              />\n              <Typography\n                variant=\"body2\"\n                color=\"textSecondary\"\n              >\n                I have read the\n                {' '}\n                <Link\n                  component=\"a\"\n                  href=\"#\"\n                  color=\"secondary\"\n                >\n                  Terms and Conditions\n                </Link>\n              </Typography>\n            </Box>\n            {Boolean(touched.policy && errors.policy) && (\n              <FormHelperText error>\n                {errors.policy}\n              </FormHelperText>\n            )}\n            {errors.submit && (\n              <Box mt={3}>\n                <FormHelperText error>\n                  {errors.submit}\n                </FormHelperText>\n              </Box>\n            )}\n            <Box mt={2}>\n              <Button\n                color=\"secondary\"\n                disabled={isSubmitting}\n                fullWidth\n                size=\"large\"\n                type=\"submit\"\n                variant=\"contained\"\n              >\n                Register\n              </Button>\n            </Box>\n          </form>\n        )}\n      </Formik>\n    </>\n  );\n};\n\nFirebaseAuthRegister.propTypes = {\n  className: PropTypes.string\n};\n\nexport default FirebaseAuthRegister;\n","import React from 'react';\nimport clsx from 'clsx';\nimport * as Yup from 'yup';\nimport PropTypes from 'prop-types';\nimport { Formik } from 'formik';\nimport {\n  Box,\n  Button,\n  Checkbox,\n  FormHelperText,\n  TextField,\n  Typography,\n  Link,\n  makeStyles\n} from '@material-ui/core';\nimport useAuth from 'src/hooks/useAuth';\nimport useIsMountedRef from 'src/hooks/useIsMountedRef';\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nconst JWTRegister = ({ className, ...rest }) => {\n  const classes = useStyles();\n  const { register } = useAuth();\n  const isMountedRef = useIsMountedRef();\n\n  return (\n    <Formik\n      initialValues={{\n        email: '',\n        name: '',\n        password: '',\n        policy: false,\n        submit: null\n      }}\n      validationSchema={Yup.object().shape({\n        email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\n        name: Yup.string().max(255).required('Name is required'),\n        password: Yup.string().min(7).max(255).required('Password is required'),\n        policy: Yup.boolean().oneOf([true], 'This field must be checked')\n      })}\n      onSubmit={async (values, {\n        setErrors,\n        setStatus,\n        setSubmitting\n      }) => {\n        try {\n          await register(values.email, values.name, values.password);\n\n          if (isMountedRef.current) {\n            setStatus({ success: true });\n            setSubmitting(false);\n          }\n        } catch (err) {\n          console.error(err);\n          setStatus({ success: false });\n          setErrors({ submit: err.message });\n          setSubmitting(false);\n        }\n      }}\n    >\n      {({\n        errors,\n        handleBlur,\n        handleChange,\n        handleSubmit,\n        isSubmitting,\n        touched,\n        values\n      }) => (\n        <form\n          noValidate\n          className={clsx(classes.root, className)}\n          onSubmit={handleSubmit}\n          {...rest}\n        >\n          <TextField\n            error={Boolean(touched.name && errors.name)}\n            fullWidth\n            helperText={touched.name && errors.name}\n            label=\"Name\"\n            margin=\"normal\"\n            name=\"name\"\n            onBlur={handleBlur}\n            onChange={handleChange}\n            value={values.name}\n            variant=\"outlined\"\n          />\n          <TextField\n            error={Boolean(touched.email && errors.email)}\n            fullWidth\n            helperText={touched.email && errors.email}\n            label=\"Email Address\"\n            margin=\"normal\"\n            name=\"email\"\n            onBlur={handleBlur}\n            onChange={handleChange}\n            type=\"email\"\n            value={values.email}\n            variant=\"outlined\"\n          />\n          <TextField\n            error={Boolean(touched.password && errors.password)}\n            fullWidth\n            helperText={touched.password && errors.password}\n            label=\"Password\"\n            margin=\"normal\"\n            name=\"password\"\n            onBlur={handleBlur}\n            onChange={handleChange}\n            type=\"password\"\n            value={values.password}\n            variant=\"outlined\"\n          />\n          <Box\n            alignItems=\"center\"\n            display=\"flex\"\n            mt={2}\n            ml={-1}\n          >\n            <Checkbox\n              checked={values.policy}\n              name=\"policy\"\n              onChange={handleChange}\n            />\n            <Typography\n              variant=\"body2\"\n              color=\"textSecondary\"\n            >\n              I have read the\n              {' '}\n              <Link\n                component=\"a\"\n                href=\"#\"\n                color=\"secondary\"\n              >\n                Terms and Conditions\n              </Link>\n            </Typography>\n          </Box>\n          {Boolean(touched.policy && errors.policy) && (\n            <FormHelperText error>\n              {errors.policy}\n            </FormHelperText>\n          )}\n          {errors.submit && (\n            <Box mt={3}>\n              <FormHelperText error>\n                {errors.submit}\n              </FormHelperText>\n            </Box>\n          )}\n          <Box mt={2}>\n            <Button\n              color=\"secondary\"\n              disabled={isSubmitting}\n              fullWidth\n              size=\"large\"\n              type=\"submit\"\n              variant=\"contained\"\n            >\n              Register\n            </Button>\n          </Box>\n        </form>\n      )}\n    </Formik>\n  );\n};\n\nJWTRegister.propTypes = {\n  className: PropTypes.string\n};\n\nexport default JWTRegister;\n","import React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport {\n  Box,\n  Card,\n  CardContent,\n  Chip,\n  Container,\n  Divider,\n  Link,\n  Tooltip,\n  Typography,\n  makeStyles\n} from '@material-ui/core';\nimport Page from 'src/components/Page';\nimport Logo from 'src/components/Logo';\nimport useAuth from 'src/hooks/useAuth';\nimport Auth0Register from './Auth0Register';\nimport FirebaseAuthRegister from './FirebaseAuthRegister';\nimport JWTRegister from './JWTRegister';\nimport SSORegister from './SSORegister';\n\nconst methodIcons = {\n  'Auth0': '/static/images/auth0.svg',\n  'FirebaseAuth': '/static/images/firebase.svg',\n  'JWT': '/static/images/jwt.svg'\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    backgroundColor: theme.palette.background.dark,\n    display: 'flex',\n    flexDirection: 'column',\n    minHeight: '100vh'\n  },\n  banner: {\n    backgroundColor: theme.palette.background.paper,\n    paddingBottom: theme.spacing(2),\n    paddingTop: theme.spacing(2),\n    borderBottom: `1px solid ${theme.palette.divider}`\n  },\n  bannerChip: {\n    marginRight: theme.spacing(2)\n  },\n  methodIcon: {\n    height: 30,\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2)\n  },\n  cardContainer: {\n    paddingBottom: 80,\n    paddingTop: 80,\n  },\n  cardContent: {\n    padding: theme.spacing(4),\n    display: 'flex',\n    flexDirection: 'column',\n    minHeight: 400\n  },\n  currentMethodIcon: {\n    height: 40,\n    '& > img': {\n      width: 'auto',\n      maxHeight: '100%'\n    }\n  }\n}));\n\nconst RegisterView = () => {\n  const classes = useStyles();\n  const { method } = useAuth();\n\n  return (\n    <Page\n      className={classes.root}\n      title=\"Register\"\n    >\n      <div className={classes.banner}>\n        <Container maxWidth=\"md\">\n          <Box\n            alignItems=\"center\"\n            display=\"flex\"\n            justifyContent=\"center\"\n          >\n            <Chip\n              color=\"secondary\"\n              label=\"NEW\"\n              size=\"small\"\n              className={classes.bannerChip}\n            />\n            <Box\n              alignItems=\"center\"\n              display=\"flex\"\n            >\n              <Typography\n                color=\"textPrimary\"\n                variant=\"h6\"\n              >\n                Visit our\n                {' '}\n                <Link\n                  component={RouterLink}\n                  to=\"/docs\"\n                >\n                  docs\n                </Link>\n                {' '}\n                and find out how to switch between\n              </Typography>\n              <Tooltip title=\"Auth0\">\n                <img\n                  alt=\"Auth0\"\n                  className={classes.methodIcon}\n                  src={methodIcons['Auth0']}\n                />\n              </Tooltip>\n              <Tooltip title=\"Firebase\">\n                <img\n                  alt=\"Firebase\"\n                  className={classes.methodIcon}\n                  src={methodIcons['FirebaseAuth']}\n                />\n              </Tooltip>\n              <Tooltip title=\"JSON Web Token\">\n                <img\n                  alt=\"JWT\"\n                  className={classes.methodIcon}\n                  src={methodIcons['JWT']}\n                />\n              </Tooltip>\n            </Box>\n          </Box>\n        </Container>\n      </div>\n      <Container\n        className={classes.cardContainer}\n        maxWidth=\"sm\"\n      >\n        <Box\n          mb={8}\n          display=\"flex\"\n          justifyContent=\"center\"\n        >\n          <RouterLink to=\"/\">\n            <Logo />\n          </RouterLink>\n        </Box>\n        <Card>\n          <CardContent className={classes.cardContent}>\n            <Box\n              alignItems=\"center\"\n              display=\"flex\"\n              justifyContent=\"space-between\"\n              mb={3}\n            >\n              <div>\n                <Typography\n                  color=\"textPrimary\"\n                  gutterBottom\n                  variant=\"h2\"\n                >\n                  Register\n                </Typography>\n                <Typography\n                  variant=\"body2\"\n                  color=\"textSecondary\"\n                >\n                  Register on the internal platform\n                </Typography>\n              </div>\n              <div className={classes.currentMethodIcon}>\n                <img\n                  alt=\"Auth method\"\n                  src={methodIcons[method]}\n                />\n              </div>\n            </Box>\n            <Box\n              flexGrow={1}\n              mt={3}\n            >\n              {method === 'Auth0' && <Auth0Register /> }\n              {method === 'FirebaseAuth' && <FirebaseAuthRegister /> }\n              {method === 'JWT' && <JWTRegister /> }\n            </Box>\n            <Box my={3}>\n              <Divider />\n            </Box>\n            <Link\n              component={RouterLink}\n              to=\"/login\"\n              variant=\"body2\"\n              color=\"textSecondary\"\n            >\n              Having an account\n            </Link>\n          </CardContent>\n        </Card>\n      </Container>\n    </Page>\n  );\n};\n\nexport default RegisterView;\n","import React from 'react';\nimport clsx from 'clsx';\nimport * as Yup from 'yup';\nimport PropTypes from 'prop-types';\nimport { Formik } from 'formik';\nimport {\n    Box,\n    Button,\n    Checkbox,\n    Divider,\n    FormHelperText,\n    Link,\n    TextField,\n    Typography,\n    makeStyles\n} from '@material-ui/core';\nimport useAuth from 'src/hooks/useAuth';\nimport useIsMountedRef from 'src/hooks/useIsMountedRef';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {},\n    googleButton: {\n        backgroundColor: theme.palette.common.white\n    },\n    providerIcon: {\n        marginRight: theme.spacing(2)\n    },\n    divider: {\n        flexGrow: 1\n    },\n    dividerText: {\n        margin: theme.spacing(2)\n    }\n}));\n\nconst SSORegister = ({ className, ...rest }) => {\n    const classes = useStyles();\n    const { createUserWithEmailAndPassword, signInWithGoogle } = useAuth();\n    const isMountedRef = useIsMountedRef();\n\n    const handleHBONClick = async () => {\n        try {\n            // await signInWithGoogle();\n            console.log('Register - handleHBONClick');\n        } catch (err) {\n            console.error(err);\n        }\n    };\n\n    return (\n        <>\n            <Button\n                className={classes.googleButton}\n                fullWidth\n                onClick={handleHBONClick}\n                size=\"large\"\n                variant=\"contained\"\n            >\n                <img\n                    alt=\"HBON\"\n                    className={classes.providerIcon}\n                    src=\"/static/images/google.svg\"\n                />\n                Đăng ký tài khoản với HBON\n            </Button>\n            <Box\n                alignItems=\"center\"\n                display=\"flex\"\n                mt={2}\n            >\n                <Divider\n                    className={classes.divider}\n                    orientation=\"horizontal\"\n                />\n                <Typography\n                    color=\"textSecondary\"\n                    variant=\"body1\"\n                    className={classes.dividerText}\n                >\n                    OR\n                </Typography>\n                <Divider\n                    className={classes.divider}\n                    orientation=\"horizontal\"\n                />\n            </Box>\n            <Formik\n                initialValues={{\n                    email: '',\n                    password: '',\n                    policy: true,\n                    submit: null\n                }}\n                validationSchema={Yup.object().shape({\n                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\n                    password: Yup.string().min(7).max(255).required('Password is required'),\n                    policy: Yup.boolean().oneOf([true], 'This field must be checked')\n                })}\n                onSubmit={async (values, {\n                    setErrors,\n                    setStatus,\n                    setSubmitting\n                }) => {\n                    try {\n                        await createUserWithEmailAndPassword(values.email, values.password);\n\n                        if (isMountedRef.current) {\n                            setStatus({ success: true });\n                            setSubmitting(false);\n                        }\n                    } catch (err) {\n                        console.error(err);\n                        if (isMountedRef.current) {\n                            setStatus({ success: false });\n                            setErrors({ submit: err.message });\n                            setSubmitting(false);\n                        }\n                    }\n                }}\n            >\n                {({\n                    errors,\n                    handleBlur,\n                    handleChange,\n                    handleSubmit,\n                    isSubmitting,\n                    touched,\n                    values\n                }) => (\n                        <form\n                            noValidate\n                            className={clsx(classes.root, className)}\n                            onSubmit={handleSubmit}\n                            {...rest}\n                        >\n                            <TextField\n                                error={Boolean(touched.email && errors.email)}\n                                fullWidth\n                                helperText={touched.email && errors.email}\n                                label=\"Email Address\"\n                                margin=\"normal\"\n                                name=\"email\"\n                                onBlur={handleBlur}\n                                onChange={handleChange}\n                                type=\"email\"\n                                value={values.email}\n                                variant=\"outlined\"\n                            />\n                            <TextField\n                                error={Boolean(touched.password && errors.password)}\n                                fullWidth\n                                helperText={touched.password && errors.password}\n                                label=\"Password\"\n                                margin=\"normal\"\n                                name=\"password\"\n                                onBlur={handleBlur}\n                                onChange={handleChange}\n                                type=\"password\"\n                                value={values.password}\n                                variant=\"outlined\"\n                            />\n                            <Box\n                                alignItems=\"center\"\n                                display=\"flex\"\n                                mt={2}\n                                ml={-1}\n                            >\n                                <Checkbox\n                                    checked={values.policy}\n                                    name=\"policy\"\n                                    onChange={handleChange}\n                                />\n                                <Typography\n                                    variant=\"body2\"\n                                    color=\"textSecondary\"\n                                >\n                                    I have read the {' '}\n                                    <Link\n                                        component=\"a\"\n                                        href=\"#\"\n                                        color=\"secondary\"\n                                    >\n                                        Terms and Conditions\n                                    </Link>\n                                </Typography>\n                            </Box>\n                            {Boolean(touched.policy && errors.policy) && (\n                                <FormHelperText error>\n                                    {errors.policy}\n                                </FormHelperText>\n                            )}\n                            {errors.submit && (\n                                <Box mt={3}>\n                                    <FormHelperText error>\n                                        {errors.submit}\n                                    </FormHelperText>\n                                </Box>\n                            )}\n                            <Box mt={2}>\n                                <Button\n                                    color=\"secondary\"\n                                    disabled={isSubmitting}\n                                    fullWidth\n                                    size=\"large\"\n                                    type=\"submit\"\n                                    variant=\"contained\"\n                                >\n                                    Register\n                                </Button>\n                            </Box>\n                        </form>\n                    )}\n            </Formik>\n        </>\n    );\n};\n\nSSORegister.propTypes = {\n    className: PropTypes.string\n};\n\nexport default SSORegister;\n"],"sourceRoot":""}