{"version":3,"sources":["hooks/useIsMountedRef.js","api/contents.js"],"names":["useIsMountedRef","isMounted","useRef","useEffect","current","listAllContent","schoolid","a","querySnapshot","app","firestore","collection","doc","orderBy","get","content","docs","map","id","data","console","log","addContent","values","image","detail","content_type","create_at","firebase","FieldValue","serverTimestamp","add","contentRef","contentData","uploadDetail","storage","ref","child","putString","on","TaskEvent","STATE_CHANGED","snapshot","progress","bytesTransferred","totalBytes","state","TaskState","PAUSED","RUNNING","error","code","getDownloadURL","then","downloadURL","set","file","content_url","metadata","contentType","cover_url","storageRef","uploadTask","put","cover","update","deleteContents","ids","foundURL","delete","err","sendNotify_Content","contentsId","getMyBody","body","statusCode","message","callback","contentInfo","exists","contents","topics","tags","length","topic","forEach","item","index","headers","Authorization","process","REACT_APP_FIREBASE_CLOUD_MESSAGE_KEY","params","condition","priority","notification","title","apns","click_action","deep_link","REACT_APP_DOMAIN_VIEWER","encodeURIComponent","request","method","url","json","response","getContentApi","querySnapshotDetail","contentDetail","fetch","r","text","updateContent","addSchoolContent","getSchoolContentApi","deleteSchoolContents","updateSchoolContent","storeImage","filename","uuidv4","in_content_url","downloadReport","contentId","jsonCustomers","embebRef","submitData","resultRef","result","logs","toString","filter","value","push","competition","competitionData","setTimeout","fileName","wb","Sheets","XLSX","json_to_sheet","SheetNames","excelBuffer","bookType","type","Blob","FileSaver"],"mappings":"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","file":"static/js/11.d4fb09cc.chunk.js","sourcesContent":["import {useRef, useEffect } from 'react';\n\nconst useIsMountedRef = () => {\n  const isMounted = useRef(true);\n\n  useEffect(() => () => {\n    isMounted.current = false;\n  }, []);\n\n  return isMounted;\n};\n\nexport default useIsMountedRef;\n","import firebase from 'firebase';\nimport app from './firebase';\nimport request from 'request';\n\nimport { v4 as uuidv4 } from 'uuid';\nimport * as XLSX from 'xlsx';\nimport * as FileSaver from 'file-saver';\n\nexport const listAllContent = async (schoolid) => {\n  try {\n    let querySnapshot = null;\n    if (schoolid) {\n      querySnapshot = await app.firestore().collection('schools').doc(schoolid).collection('contents').orderBy('create_at', 'desc').get();\n    } else {\n      querySnapshot = await app.firestore().collection('contents').orderBy('create_at', 'desc').get();\n    }\n    const content = querySnapshot.docs.map((doc) => {\n      return {\n        id: doc.id,\n        ...doc.data()\n      };\n    });\n    return content;\n  } catch (err) {\n    console.log(err);\n  }\n};\n\n\nexport const addContent = async (values, image) => {\n\n  try {\n  //   var imageBuffer = Buffer.from(image);\n    let detail = ' <news content-type=\\'news\\'>' + values.detail + '</news>';\n    delete values.detail;\n    values.content_type = 'news';\n    values.create_at = firebase.firestore.FieldValue.serverTimestamp();\n    let contentRef = await app.firestore().collection('contents').add(values);\n\n    let content = await contentRef.get();\n    console.log('done content:' + content.id);\n    // contentRef.collection('detail').doc('content').set({ data: detail });\n    let contentData = content.data();\n    var uploadDetail = app.storage().ref().child('public/contents/'+content.id).putString(detail);\n    uploadDetail.on(firebase.storage.TaskEvent.STATE_CHANGED, // or 'state_changed'\n      function(snapshot) {\n        // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n        var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n        console.log('Upload cover is ' + progress + '% done');\n        switch (snapshot.state) {\n          case firebase.storage.TaskState.PAUSED: // or 'paused'\n            console.log('Upload cover is paused');\n            break;\n          case firebase.storage.TaskState.RUNNING: // or 'running'\n            console.log('Upload cover is running');\n            break;\n        }\n      },\n      function(error) {\n\n        switch (error.code) {\n          case 'storage/unauthorized':\n            console.log('unauthorized');\n            break;\n          case 'storage/canceled':\n            console.log('cancel');\n            break;\n          case 'storage/unknown':\n\n            console.log('unkonwn');\n            // Unknown error occurred, inspect error.serverResponse\n            break;\n        }\n      },\n      function() {\n        // Upload completed successfully, now we can get the download URL\n        uploadDetail.snapshot.ref.getDownloadURL().then(function(downloadURL) {\n          console.log('File available at', downloadURL);\n          contentRef.collection('detail').doc('content').set({data: detail,\n            file: 'public/contents/'+content.id,\n            content_url: downloadURL });\n        });\n      });\n    // .then((snapshot) => {\n    //   console.log(snapshot);\n    //   contentRef.collection('detail').doc('content').set({ file: 'public/contents/'+content.id });\n    // });\n\n    if (typeof (image) == 'undefined') {\n      return;\n    }\n    var metadata = {\n      contentType: 'image/jpeg'\n    };\n    let cover_url = 'public/images/content/' + content.id;\n    let cover_app_url = 'public/images/content/app' + content.id;\n    var storageRef = app.storage().ref();\n    var uploadTask = storageRef.child(cover_url).put(image, metadata);\n    uploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED, // or 'state_changed'\n      function(snapshot) {\n        // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n        var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n        console.log('Upload cover is ' + progress + '% done');\n        switch (snapshot.state) {\n          case firebase.storage.TaskState.PAUSED: // or 'paused'\n            console.log('Upload cover is paused');\n            break;\n          case firebase.storage.TaskState.RUNNING: // or 'running'\n            console.log('Upload cover is running');\n            break;\n        }\n      },\n      function(error) {\n\n        switch (error.code) {\n          case 'storage/unauthorized':\n            console.log('unauthorized');\n            break;\n          case 'storage/canceled':\n            console.log('cancel');\n            break;\n          case 'storage/unknown':\n\n            console.log('unkonwn');\n            // Unknown error occurred, inspect error.serverResponse\n            break;\n        }\n      },\n      function() {\n        // Upload completed successfully, now we can get the download URL\n        uploadTask.snapshot.ref.getDownloadURL().then(function(downloadURL) {\n          console.log('File available at', downloadURL);\n          contentData.cover = downloadURL;\n          app.firestore().collection('contents').doc(content.id).update(contentData);\n        });\n      });\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const deleteContents = (ids) => {\n  try {\n    ids.map((id) => {\n      let cover_url = 'public/images/content/' + id;\n      var storageRef = app.storage().ref();\n      storageRef.child(cover_url).getDownloadURL().then(onResolve, onReject);\n\n      function onResolve(foundURL) {\n        storageRef.child(cover_url).delete();\n      }\n\n      function onReject(error) {\n        console.log(error.code);\n      }\n\n      app.firestore().collection('contents').doc(id).collection('detail').doc('content').delete();\n      app.firestore().collection('contents').doc(id).delete();\n    });\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const sendNotify_Content = async(contentsId)=>{\n  await getMyBody(contentsId, function(err, body) {\n    if (err) {\n      console.log(err);\n      return{\n        statusCode:500,\n        message:\"Gửi notify thất bại\"\n      }\n    } else {\n      console.log(body);\n      return {\n        statusCode:200,\n        message:'Gửi notify thành công'\n      }\n    }\n  });\n};\nasync function getMyBody(contentsId,callback){\n  console.log(contentsId);\n  const contentRef =  app.firestore().collection(\"contents\").doc(contentsId);\n  const contentInfo = await contentRef.get();\n  if(contentInfo.exists){\n    const contents = contentInfo.data();\n    const topics = contents.tags;\n    if(topics.length>0) {\n      let topic = [];\n      topics.forEach((item, index) => {\n        if (topics.length >= 5) {\n          if (index < 5) {\n            if (index == 4) {\n              topic += \"'\" + item + \"'\" + \" in topics \";\n            } else {\n              topic += \"'\" + item + \"'\" + \" in topics || \";\n            }\n          }\n        } else {\n          console.log(topic.length);\n          console.log(\"topic.length\");\n          if (index < 5) {\n            if (index + 1 == topics.length) {\n              topic += \"'\" + item + \"'\" + \" in topics \";\n            } else {\n              topic += \"'\" + item + \"'\" + \" in topics || \";\n            }\n          }\n        }\n      });\n      // const auth_key: any =\n      //     \"AAAAQx2VGH0:APA91bFH8hD3jePoKNsCShHONYlQslhMGIZke3YzFaO-JysZDbYaDiypik7Esy4BdhTYa34LjvSGLgqGNRGk7_JnUBm59yaAPSCmXK5wAZBJsztBDPCBKTIrjzIFv7gH3ebXDGRk0q_f\";\n      const headers = {\n        \"User-Agent\":\n          \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:24.0) Gecko/20100101 Firefox/24.0\",\n        \"Content-Type\": \"application/json\",\n        Authorization: \"key=\"+process.env.REACT_APP_FIREBASE_CLOUD_MESSAGE_KEY,\n        // Authorization: \"key=AAAAQx2VGH0:APA91bFH8hD3jePoKNsCShHONYlQslhMGIZke3YzFaO-JysZDbYaDiypik7Esy4BdhTYa34LjvSGLgqGNRGk7_JnUBm59yaAPSCmXK5wAZBJsztBDPCBKTIrjzIFv7gH3ebXDGRk0q_f\",\n      };\n      const params = {\n        condition: topic,\n        // to:\"dzzEEKhyS86WXRqgm7SMqp:APA91bHsfLjBOQ-0eNrQV1gi43FQ95mF8w7STwDC2aln5f9n5ztI4PskbXPGimpaS-dEoBR82SY3nZvahF7AzRe-2aTlrk9bw55tDF-9KRU1mMLG2DCVjPJkbipoAR4a7lQME8iD7H-y\",\n        priority: \"high\",\n        notification: {\n          body: contents.title,\n          title: \"Hbon news\",\n          \"sound\": \"default\",\n          \"image\":contents.cover\n        },\n        apns: {\n          \"payload\": {\n            \"aps\": {\n              \"mutable-content\": 1\n            }\n          },\n          \"fcm_options\": {\n            \"image\": contents.cover\n          }\n        },\n        data: {\n          click_action: \"FLUTTER_NOTIFICATION_CLICK\",\n          deep_link:  process.env.REACT_APP_DOMAIN_VIEWER+\"/news_detail?content_id=\" + contentsId + \"&news_title=\" + encodeURIComponent(contents.title),\n          // deep_link:  \"https://test.dschool.vn/news_detail?content_id=\" + contentsId + \"&news_title=\" + encodeURIComponent(contents.title),\n          body: contents.title,\n          title: \"Hbon news\",\n          content_type: \"news\",\n        },\n      };\n      request(\n        {\n          method: \"POST\",\n          url: \"https://fcm.googleapis.com/fcm/send\",\n          body: params,\n          headers: headers,\n          json: true,\n        },\n        function (error, response, body) {\n          console.log(body);\n          console.log(response);\n          console.log(response.statusCode);\n          console.log(response.request);\n          if (error || response.statusCode !== 200) {\n            console.log(body);\n            return callback(error || { statusCode: response.statusCode });\n          }\n          callback(null, body);\n        });\n    }\n  }\n}\n\n// export const sendNotify_Content = async (contentsId)=>\n// {\n//   console.log(contentsId);\n//   const contentRef =  app.firestore().collection(\"contents\").doc(contentsId);\n//   const contentInfo = await contentRef.get();\n//   if(contentInfo.exists){\n//     const contents = contentInfo.data();\n//     const topics = contents.tags;\n//     if(topics.length>0) {\n//       let topic = [];\n//       topics.forEach((item, index) => {\n//         if (topics.length >= 5) {\n//           if (index < 5) {\n//             if (index == 4) {\n//               topic += \"'\" + item + \"'\" + \" in topics \";\n//             } else {\n//               topic += \"'\" + item + \"'\" + \" in topics || \";\n//             }\n//           }\n//         } else {\n//           console.log(topic.length);\n//           console.log(\"topic.length\");\n//           if (index < 5) {\n//             if (index + 1 == topics.length) {\n//               topic += \"'\" + item + \"'\" + \" in topics \";\n//             } else {\n//               topic += \"'\" + item + \"'\" + \" in topics || \";\n//             }\n//           }\n//         }\n//       });\n//       console.log('=========hehehe');\n//       console.log(topic);\n//\n//       // const auth_key: any =\n//       //     \"AAAAQx2VGH0:APA91bFH8hD3jePoKNsCShHONYlQslhMGIZke3YzFaO-JysZDbYaDiypik7Esy4BdhTYa34LjvSGLgqGNRGk7_JnUBm59yaAPSCmXK5wAZBJsztBDPCBKTIrjzIFv7gH3ebXDGRk0q_f\";\n//       const headers = {\n//         \"User-Agent\":\n//           \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:24.0) Gecko/20100101 Firefox/24.0\",\n//         \"Content-Type\": \"application/json\",\n//         // Authorization: \"key=\"+process.env.REACT_APP_FIREBASE_CLOUD_MESSAGE_KEY,\n//         Authorization: \"key=AAAAQx2VGH0:APA91bFH8hD3jePoKNsCShHONYlQslhMGIZke3YzFaO-JysZDbYaDiypik7Esy4BdhTYa34LjvSGLgqGNRGk7_JnUBm59yaAPSCmXK5wAZBJsztBDPCBKTIrjzIFv7gH3ebXDGRk0q_f\",\n//       };\n//       const params = {\n//         condition: topic,\n//         priority: \"high\",\n//         notification: {\n//           body: contents.title,\n//           title: \"Hbon news\",\n//           \"sound\": \"default\",\n//           \"image\":contents.cover\n//         },\n//         apns: {\n//           \"payload\": {\n//             \"aps\": {\n//               \"mutable-content\": 1\n//             }\n//           },\n//           \"fcm_options\": {\n//             \"image\": contents.cover\n//           }\n//         },\n//         data: {\n//           click_action: \"FLUTTER_NOTIFICATION_CLICK\",\n//           // deep_link:  process.env.REACT_APP_DOMAIN_VIEWER+\"/news_detail?content_id=\" + contentsId + \"&news_title=\" + encodeURIComponent(contents.title),\n//           deep_link:  \"https://test.dschool.vn/news_detail?content_id=\" + contentsId + \"&news_title=\" + encodeURIComponent(contents.title),\n//           body: contents.title,\n//           title: \"Hbon news\",\n//           content_type: \"news\",\n//         },\n//       };\n//       return request.post(\n//         {\n//           url: \"https://fcm.googleapis.com/fcm/send\",\n//           body: params,\n//           headers: headers,\n//           json: true,\n//         },\n//         function (error, response, body) {\n//           if (!error && response.statusCode === 200) {\n//             console.log(body);\n//             const result = {\n//               error_code:0,\n//               message:\"send message sucess\"\n//             };\n//             console.log(result);\n//             return result;\n//           } else {\n//             const result = {\n//               error_code:1,\n//               message:\"send message error\"\n//             };\n//             return result;\n//           }\n//         }\n//       );\n//     }\n//   }\n// }\nexport const getContentApi = async (id) => {\n  try {\n    let querySnapshot = await app.firestore().collection('contents').doc(id).get();\n    const content = querySnapshot.data();\n    content.id = id;\n    let querySnapshotDetail = await app.firestore().collection('contents').doc(id).collection('detail').doc('content').get();\n    const contentDetail = querySnapshotDetail.data();\n\n    console.log(contentDetail.content_url);\n    const detail = await fetch(contentDetail.content_url)\n      .then( r => r.text() );\n      // .then( t => {\n      //   content.detail = t;\n      // } );\n    console.log(detail);\n    content.detail = detail;\n    return content;\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const updateContent = async (data, image) => {\n  try {\n    console.log('update contents');\n    let id = data.id;\n    let detail = ' <news content-type=\\'news\\'>' + data.detail + '</news>';\n    delete data.detail;\n    await app.firestore().collection('contents').doc(id).update(data);\n    var uploadDetail = app.storage().ref().child('public/contents/'+id).putString(detail);\n    uploadDetail.on(firebase.storage.TaskEvent.STATE_CHANGED, // or 'state_changed'\n      function(snapshot) {\n        // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n        var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n        console.log('Upload cover is ' + progress + '% done');\n        switch (snapshot.state) {\n          case firebase.storage.TaskState.PAUSED: // or 'paused'\n            console.log('Upload cover is paused');\n            break;\n          case firebase.storage.TaskState.RUNNING: // or 'running'\n            console.log('Upload cover is running');\n            break;\n        }\n      },\n      function(error) {\n\n        switch (error.code) {\n          case 'storage/unauthorized':\n            console.log('unauthorized');\n            break;\n          case 'storage/canceled':\n            console.log('cancel');\n            break;\n          case 'storage/unknown':\n\n            console.log('unkonwn');\n            // Unknown error occurred, inspect error.serverResponse\n            break;\n        }\n      },\n      function() {\n        // Upload completed successfully, now we can get the download URL\n        uploadDetail.snapshot.ref.getDownloadURL().then(function(downloadURL) {\n          console.log('File available at', downloadURL);\n          app.firestore().collection('contents').doc(id).collection('detail').doc('content').set({ file: 'public/contents/'+id,\n            content_url: downloadURL });\n        });\n      });\n    if (typeof (image) == 'undefined') {\n      return;\n    }\n    if (data.cover) {\n    }\n    var metadata = {\n      contentType: 'image/jpeg'\n    };\n    let cover_url = 'public/images/content/' + data.id;\n    var storageRef = app.storage().ref();\n    var uploadTask = storageRef.child(cover_url).put(image, metadata);\n    uploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED, // or 'state_changed'\n      function(snapshot) {\n        // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n        var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n        console.log('Upload cover is ' + progress + '% done');\n        switch (snapshot.state) {\n          case firebase.storage.TaskState.PAUSED: // or 'paused'\n            console.log('Upload cover is paused');\n            break;\n          case firebase.storage.TaskState.RUNNING: // or 'running'\n            console.log('Upload cover is running');\n            break;\n        }\n      },\n      function(error) {\n\n        switch (error.code) {\n          case 'storage/unauthorized':\n            console.log('unauthorized');\n            break;\n          case 'storage/canceled':\n            console.log('cancel');\n            break;\n          case 'storage/unknown':\n\n            console.log('unkonwn');\n            // Unknown error occurred, inspect error.serverResponse\n            break;\n        }\n      },\n      function() {\n        // Upload completed successfully, now we can get the download URL\n        uploadTask.snapshot.ref.getDownloadURL().then(function(downloadURL) {\n          console.log('File available at', downloadURL);\n          data.cover = downloadURL;\n          app.firestore().collection('contents').doc(id).update(data);\n        });\n      });\n\n  } catch (err) {\n    console.log(err);\n  }\n};\n\n\nexport const addSchoolContent = async (values, image) => {\n  let schoolid = values.schoolid;\n  if (schoolid) {\n\n    try {\n      let detail = ' <news content-type=\\'news\\'>' + values.detail + '</news>';\n      delete values.detail;\n      values.content_type = 'news';\n      values.create_at = firebase.firestore.FieldValue.serverTimestamp();\n      let contentRef = await app.firestore().collection('schools').doc(schoolid).collection('contents').add(values);\n\n      let content = await contentRef.get();\n      console.log('done content:' + content.id);\n      contentRef.collection('detail').doc('content').set({ data: detail });\n      let contentData = content.data();\n\n      if (typeof (image) == 'undefined') {\n        return;\n      }\n      var metadata = {\n        contentType: 'image/jpeg'\n      };\n      let cover_url = 'public/images/content/' + content.id;\n      var storageRef = app.storage().ref();\n      var uploadTask = storageRef.child(cover_url).put(image, metadata);\n      uploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED, // or 'state_changed'\n        function(snapshot) {\n          // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n          var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n          console.log('Upload cover is ' + progress + '% done');\n          switch (snapshot.state) {\n            case firebase.storage.TaskState.PAUSED: // or 'paused'\n              console.log('Upload cover is paused');\n              break;\n            case firebase.storage.TaskState.RUNNING: // or 'running'\n              console.log('Upload cover is running');\n              break;\n          }\n        },\n        function(error) {\n\n          switch (error.code) {\n            case 'storage/unauthorized':\n              console.log('unauthorized');\n              break;\n            case 'storage/canceled':\n              console.log('cancel');\n              break;\n            case 'storage/unknown':\n\n              console.log('unkonwn');\n              // Unknown error occurred, inspect error.serverResponse\n              break;\n          }\n        },\n        function() {\n          // Upload completed successfully, now we can get the download URL\n          uploadTask.snapshot.ref.getDownloadURL().then(function(downloadURL) {\n            console.log('File available at', downloadURL);\n            contentData.cover = downloadURL;\n            app.firestore().collection('schools').doc(schoolid).collection('contents').doc(content.id).update(contentData);\n          });\n        });\n    } catch (err) {\n      console.log(err);\n    }\n\n  }\n};\nexport const getSchoolContentApi = async (id, schoolid) => {\n  try {\n    let querySnapshot = await app.firestore().collection('schools').doc(schoolid).collection('contents').doc(id).get();\n    const content = querySnapshot.data();\n    content.id = id;\n    let querySnapshotDetail = await app.firestore().collection('schools').doc(schoolid).collection('contents').doc(id).collection('detail').doc('content').get();\n    const contentDetail = querySnapshotDetail.data();\n    content.detail = contentDetail.data;\n    return content;\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const deleteSchoolContents = (ids, schoolid) => {\n  try {\n    ids.map((id) => {\n      let cover_url = 'public/images/content/' + id;\n      var storageRef = app.storage().ref();\n      storageRef.child(cover_url).getDownloadURL().then(onResolve, onReject);\n\n      function onResolve(foundURL) {\n        storageRef.child(cover_url).delete();\n      }\n\n      function onReject(error) {\n        console.log(error.code);\n      }\n\n      app.firestore().collection('schools').doc(schoolid).collection('contents').doc(id).collection('detail').doc('content').delete();\n      app.firestore().collection('schools').doc(schoolid).collection('contents').doc(id).delete();\n    });\n  } catch (err) {\n    console.log(err);\n  }\n};\n\n\nexport const updateSchoolContent = async (data, image) => {\n  try {\n    const schoolid = data.schoolid;\n    console.log('update contents');\n    let id = data.id;\n    let detail = ' <news content-type=\\'news\\'>' + data.detail + '</news>';\n    delete data.detail;\n    await app.firestore().collection('schools').doc(schoolid).collection('contents').doc(id).update(data);\n    await app.firestore().collection('schools').doc(schoolid).collection('contents').doc(id).collection('detail').doc('content').update({ data: detail });\n    if (typeof (image) == 'undefined') {\n      return;\n    }\n    if (data.cover) {\n\n    }\n    var metadata = {\n      contentType: 'image/jpeg'\n    };\n    let cover_url = 'public/images/content/' + data.id;\n    var storageRef = app.storage().ref();\n    var uploadTask = storageRef.child(cover_url).put(image, metadata);\n    uploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED, // or 'state_changed'\n      function(snapshot) {\n        // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n        var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n        console.log('Upload cover is ' + progress + '% done');\n        switch (snapshot.state) {\n          case firebase.storage.TaskState.PAUSED: // or 'paused'\n            console.log('Upload cover is paused');\n            break;\n          case firebase.storage.TaskState.RUNNING: // or 'running'\n            console.log('Upload cover is running');\n            break;\n        }\n      },\n      function(error) {\n        switch (error.code) {\n          case 'storage/unauthorized':\n            console.log('unauthorized');\n            break;\n          case 'storage/canceled':\n            console.log('cancel');\n            break;\n          case 'storage/unknown':\n            console.log('unkonwn');\n            // Unknown error occurred, inspect error.serverResponse\n            break;\n        }\n      },\n      function() {\n        // Upload completed successfully, now we can get the download URL\n        uploadTask.snapshot.ref.getDownloadURL().then(function(downloadURL) {\n          console.log('File available at', downloadURL);\n          data.cover = downloadURL;\n          app.firestore().collection('schools').doc(schoolid).collection('contents').doc(id).update(data);\n        });\n      });\n\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const storeImage = async ( image,callback) => {\n  try {\n    const filename=uuidv4();\n    if (typeof (image) == 'undefined') {\n      return callback(null);\n    }\n    var metadata = {\n      contentType: 'image/jpeg'\n    };\n    let in_content_url = 'public/images/content/detail/' + filename;\n    var storageRef = app.storage().ref();\n    var uploadTask = storageRef.child(in_content_url).put(image, metadata);\n    uploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED, // or 'state_changed'\n      function(snapshot) {\n        // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n        var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n        console.log('Upload cover is ' + progress + '% done');\n        switch (snapshot.state) {\n          case firebase.storage.TaskState.PAUSED: // or 'paused'\n            console.log('Upload cover is paused');\n            break;\n          case firebase.storage.TaskState.RUNNING: // or 'running'\n            console.log('Upload cover is running');\n            break;\n        }\n      },\n      function(error) {\n\n        switch (error.code) {\n          case 'storage/unauthorized':\n            console.log('unauthorized');\n            break;\n          case 'storage/canceled':\n            console.log('cancel');\n            break;\n          case 'storage/unknown':\n\n            console.log('unkonwn');\n            // Unknown error occurred, inspect error.serverResponse\n            break;\n        }\n      },\n      function() {\n        // Upload completed successfully, now we can get the download URL\n        uploadTask.snapshot.ref.getDownloadURL().then(function(downloadURL) {\n          console.log('File available at', downloadURL);\n          return callback(downloadURL);\n        });\n      });\n    // let querySnapshot = await app.firestore().collection('schools').doc(schoolid).collection('contents').doc(id).get();\n    // const content = querySnapshot.data();\n    // content.id = id;\n    // let querySnapshotDetail = await app.firestore().collection('schools').doc(schoolid).collection('contents').doc(id).collection('detail').doc('content').get();\n    // const contentDetail = querySnapshotDetail.data();\n    // content.detail = contentDetail.data;\n    // return content;\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const downloadReport = async(contentId)=>{\n  console.log(contentId);\n  var jsonCustomers = [];\n  const embebRef = app.firestore().collection('contents').doc(contentId).collection('embedded_submissions');\n  const snapshot = await embebRef.get();\n  snapshot.forEach(async (doc) => {\n    // console.log(doc.id, '=>', doc.data());\n    const submitData = doc.data();\n    const resultRef = app.firestore().collection('contents').doc(contentId).collection('embedded_submissions').doc(doc.id).collection('quizzes_submissions');\n    const resultData = await resultRef.get();\n    resultData.forEach(async(result) => {\n      let logs = result.data().result;\n      submitData['logs-'+result.id] = logs.toString();\n      submitData['results-'+result.id] = logs.filter(function(value){\n        return value === true;\n      }).length ;\n    });\n    jsonCustomers.push(submitData);\n    console.log(submitData);\n  });\n  const competition = await app.firestore().collection('contents').doc(contentId).get();\n  const competitionData = competition.data();\n  setTimeout(function(){\n    const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\n    const fileExtension = '.xlsx';\n\n    const fileName = competitionData.title;\n    const ws = XLSX.utils.json_to_sheet(jsonCustomers);\n    const wb = { Sheets: { 'data': ws }, SheetNames: ['data'] };\n    const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\n    const data = new Blob([excelBuffer], {type: fileType});\n    FileSaver.saveAs(data, fileName + fileExtension);\n  }, 30000);\n};\n//\n//import {storeImage} from '../api/contents';\n"],"sourceRoot":""}