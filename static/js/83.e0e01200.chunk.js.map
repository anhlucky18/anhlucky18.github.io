{"version":3,"sources":["../node_modules/@material-ui/icons/NavigateNext.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncIterator.js","../../lib/hashids.ts","utils/stringutil.js","api/groups.js","views/groups/GroupCreateView/GroupCreateForm.js","views/groups/GroupCreateView/Header.js","views/groups/GroupCreateView/index.js"],"names":["_interopRequireDefault","require","_interopRequireWildcard","Object","defineProperty","exports","value","default","React","_default","createElement","d","_asyncIterator","iterable","method","Symbol","asyncIterator","call","iterator","TypeError","Hashids","salt","minLength","alphabet","seps","saltChars","Array","alphabetChars","sepsChars","this","uniqueAlphabet","keepUnique","Error","withoutChars","filteredSeps","onlyChars","shuffle","length","sepsLength","Math","diff","slice","guardCount","makeAnyOfCharsRegExp","makeAtLeastSomeCharRegExp","encode","numbers","ret","first","n","safeParseInt10","String","_encode","decode","id","_decode","encodeHex","hex","test","splitAtIntervalAndMap","parseInt","decodeHex","number","numbersIdInt","last","Number","BigInt","i","lottery","guards","buffer","toAlphabet","charCode","extraNumber","prefixGuardIndex","suffixGuardIndex","halfLength","excess","halfOfExcess","isValidId","allowedCharsRegExp","join","idGuardsArray","idBreakdown","lotteryChar","idArray","lastAlphabet","result","subId","nextAlphabet","fromAlphabet","minAlphabetLength","sepDiv","guardDiv","Set","chars","keepChars","isIntegerNumber","isPositiveAndFinite","transformed","v","p","integer","j","a","b","input","alphabetLength","inputChars","index","carry","safeToParseNumberRegExp","str","map","RegExp","escapeRegExp","text","random","charactersLength","characters","charAt","floor","random_number","addGroup","data","app","firestore","collection","where","hash_id","get","docs","add","console","log","listGroup","userId","querySnapshot","groups","doc","deletegroups","school_id","classes","dclasses","val","listMembers","groupId","members","useStyles","makeStyles","root","GroupCreateForm","className","rest","history","useHistory","enqueueSnackbar","useSnackbar","user","useAuth","hashids","initialValues","name","Date","getTime","submit","validationSchema","Yup","shape","max","required","onSubmit","values","resetForm","setErrors","setStatus","setSubmitting","replace","created_by","created_at","wait","variant","action","Button","push","error","success","message","errors","handleBlur","handleChange","handleSubmit","isSubmitting","touched","clsx","Card","CardContent","Grid","container","spacing","item","md","xs","TextField","Boolean","fullWidth","helperText","label","onBlur","onChange","disabled","Box","mt","color","type","Header","schoolname","localStorage","getItem","Breadcrumbs","separator","fontSize","aria-label","Link","to","component","RouterLink","Typography","theme","backgroundColor","palette","background","dark","minHeight","paddingTop","paddingBottom","GroupCreateView","props","Page","title","Container","maxWidth"],"mappings":"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","file":"static/js/83.e0e01200.chunk.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\"\n}), 'NavigateNext');\n\nexports.default = _default;","export default function _asyncIterator(iterable) {\n  var method;\n\n  if (typeof Symbol !== \"undefined\") {\n    if (Symbol.asyncIterator) {\n      method = iterable[Symbol.asyncIterator];\n      if (method != null) return method.call(iterable);\n    }\n\n    if (Symbol.iterator) {\n      method = iterable[Symbol.iterator];\n      if (method != null) return method.call(iterable);\n    }\n  }\n\n  throw new TypeError(\"Object is not async iterable\");\n}","type NumberLike = number | bigint\n\nexport default class Hashids {\n  private alphabet: string[]\n  private seps: string[]\n  private guards: string[]\n  private salt: string[]\n  private guardsRegExp: RegExp\n  private sepsRegExp: RegExp\n  private allowedCharsRegExp: RegExp\n\n  public constructor(\n    salt = '',\n    private minLength = 0,\n    alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890',\n    seps = 'cfhistuCFHISTU',\n  ) {\n    if (typeof minLength !== 'number') {\n      throw new TypeError(\n        `Hashids: Provided 'minLength' has to be a number (is ${typeof minLength})`,\n      )\n    }\n    if (typeof salt !== 'string') {\n      throw new TypeError(\n        `Hashids: Provided 'salt' has to be a string (is ${typeof salt})`,\n      )\n    }\n    if (typeof alphabet !== 'string') {\n      throw new TypeError(\n        `Hashids: Provided alphabet has to be a string (is ${typeof alphabet})`,\n      )\n    }\n\n    const saltChars = Array.from(salt)\n    const alphabetChars = Array.from(alphabet)\n    const sepsChars = Array.from(seps)\n\n    this.salt = saltChars\n\n    const uniqueAlphabet = keepUnique(alphabetChars)\n\n    if (uniqueAlphabet.length < minAlphabetLength) {\n      throw new Error(\n        `Hashids: alphabet must contain at least ${minAlphabetLength} unique characters, provided: ${uniqueAlphabet.join(\n          '',\n        )}`,\n      )\n    }\n\n    /** `alphabet` should not contains `seps` */\n    this.alphabet = withoutChars(uniqueAlphabet, sepsChars)\n    /** `seps` should contain only characters present in `alphabet` */\n    const filteredSeps = onlyChars(sepsChars, uniqueAlphabet)\n    this.seps = shuffle(filteredSeps, saltChars)\n\n    let sepsLength\n    let diff\n\n    if (\n      this.seps.length === 0 ||\n      this.alphabet.length / this.seps.length > sepDiv\n    ) {\n      sepsLength = Math.ceil(this.alphabet.length / sepDiv)\n\n      if (sepsLength > this.seps.length) {\n        diff = sepsLength - this.seps.length\n        this.seps.push(...this.alphabet.slice(0, diff))\n        this.alphabet = this.alphabet.slice(diff)\n      }\n    }\n\n    this.alphabet = shuffle(this.alphabet, saltChars)\n    const guardCount = Math.ceil(this.alphabet.length / guardDiv)\n\n    if (this.alphabet.length < 3) {\n      this.guards = this.seps.slice(0, guardCount)\n      this.seps = this.seps.slice(guardCount)\n    } else {\n      this.guards = this.alphabet.slice(0, guardCount)\n      this.alphabet = this.alphabet.slice(guardCount)\n    }\n\n    this.guardsRegExp = makeAnyOfCharsRegExp(this.guards)\n    this.sepsRegExp = makeAnyOfCharsRegExp(this.seps)\n    this.allowedCharsRegExp = makeAtLeastSomeCharRegExp([\n      ...this.alphabet,\n      ...this.guards,\n      ...this.seps,\n    ])\n  }\n\n  public encode(numbers: string): string\n  public encode(numbers: NumberLike[]): string\n  public encode(...numbers: NumberLike[]): string\n  public encode(numbers: string[]): string\n  public encode(...numbers: string[]): string\n  public encode<T extends string | NumberLike>(\n    first: T[] | T,\n    ...numbers: T[]\n  ): string {\n    const ret = ''\n\n    if (Array.isArray(first)) {\n      numbers = first\n    } else {\n      // eslint-disable-next-line eqeqeq\n      numbers = [...(first != null ? [first] : []), ...numbers]\n    }\n\n    if (!numbers.length) {\n      return ret\n    }\n\n    if (!numbers.every(isIntegerNumber)) {\n      numbers = numbers.map((n) =>\n        typeof n === 'bigint' || typeof n === 'number'\n          ? n\n          : safeParseInt10(String(n)),\n      ) as T[]\n    }\n\n    if (!(numbers as NumberLike[]).every(isPositiveAndFinite)) {\n      return ret\n    }\n\n    return this._encode(numbers as number[]).join('')\n  }\n\n  public decode(id: string): NumberLike[] {\n    if (!id || typeof id !== 'string' || id.length === 0) return []\n    return this._decode(id)\n  }\n\n  /**\n   * @description Splits a hex string into groups of 12-digit hexadecimal numbers,\n   * then prefixes each with '1' and encodes the resulting array of numbers\n   *\n   * Encoding '00000000000f00000000000f000f' would be the equivalent of:\n   * Hashids.encode([0x100000000000f, 0x100000000000f, 0x1000f])\n   *\n   * This means that if your environment supports BigInts,\n   * you will get different (shorter) results if you provide\n   * a BigInt representation of your hex and use `encode` directly, e.g.:\n   * Hashids.encode(BigInt(`0x${hex}`))\n   *\n   * To decode such a representation back to a hex string, use the following snippet:\n   * Hashids.decode(id)[0].toString(16)\n   */\n  public encodeHex(hex: string | bigint): string {\n    switch (typeof hex) {\n      case 'bigint':\n        hex = hex.toString(16)\n        break\n      case 'string':\n        if (!/^[0-9a-fA-F]+$/.test(hex)) return ''\n        break\n      default:\n        throw new Error(\n          `Hashids: The provided value is neither a string, nor a BigInt (got: ${typeof hex})`,\n        )\n    }\n\n    const numbers = splitAtIntervalAndMap(hex, 12, (part) =>\n      parseInt(`1${part}`, 16),\n    )\n    return this.encode(numbers)\n  }\n\n  public decodeHex(id: string): string {\n    return this.decode(id)\n      .map((number) => number.toString(16).slice(1))\n      .join('')\n  }\n\n  private _encode(numbers: NumberLike[]): string[] {\n    let alphabet = this.alphabet\n\n    const numbersIdInt = numbers.reduce<number>(\n      (last, number, i) =>\n        last +\n        (typeof number === 'bigint'\n          ? Number(number % BigInt(i + 100))\n          : number % (i + 100)),\n      0,\n    )\n\n    let ret: string[] = [alphabet[numbersIdInt % alphabet.length]]\n    const lottery = ret.slice()\n\n    const seps = this.seps\n    const guards = this.guards\n\n    numbers.forEach((number, i) => {\n      const buffer = lottery.concat(this.salt, alphabet)\n\n      alphabet = shuffle(alphabet, buffer)\n      const last = toAlphabet(number, alphabet)\n\n      ret.push(...last)\n\n      if (i + 1 < numbers.length) {\n        const charCode = last[0].codePointAt(0)! + i\n        const extraNumber =\n          typeof number === 'bigint'\n            ? Number(number % BigInt(charCode))\n            : number % charCode\n        ret.push(seps[extraNumber % seps.length])\n      }\n    })\n\n    if (ret.length < this.minLength) {\n      const prefixGuardIndex =\n        (numbersIdInt + ret[0].codePointAt(0)!) % guards.length\n      ret.unshift(guards[prefixGuardIndex])\n\n      if (ret.length < this.minLength) {\n        const suffixGuardIndex =\n          (numbersIdInt + ret[2].codePointAt(0)!) % guards.length\n        ret.push(guards[suffixGuardIndex])\n      }\n    }\n\n    const halfLength = Math.floor(alphabet.length / 2)\n    while (ret.length < this.minLength) {\n      alphabet = shuffle(alphabet, alphabet)\n      ret.unshift(...alphabet.slice(halfLength))\n      ret.push(...alphabet.slice(0, halfLength))\n\n      const excess = ret.length - this.minLength\n      if (excess > 0) {\n        const halfOfExcess = excess / 2\n        ret = ret.slice(halfOfExcess, halfOfExcess + this.minLength)\n      }\n    }\n\n    return ret\n  }\n\n  public isValidId(id: string): boolean {\n    return this.allowedCharsRegExp.test(id)\n  }\n\n  private _decode(id: string): NumberLike[] {\n    if (!this.isValidId(id)) {\n      throw new Error(\n        `The provided ID (${id}) is invalid, as it contains characters that do not exist in the alphabet (${this.guards.join(\n          '',\n        )}${this.seps.join('')}${this.alphabet.join('')})`,\n      )\n    }\n    const idGuardsArray = id.split(this.guardsRegExp)\n    const splitIndex =\n      idGuardsArray.length === 3 || idGuardsArray.length === 2 ? 1 : 0\n\n    const idBreakdown = idGuardsArray[splitIndex]\n    if (idBreakdown.length === 0) return []\n\n    const lotteryChar = idBreakdown[Symbol.iterator]().next().value as string\n    const idArray = idBreakdown.slice(lotteryChar.length).split(this.sepsRegExp)\n\n    let lastAlphabet: string[] = this.alphabet\n    const result: NumberLike[] = []\n\n    for (const subId of idArray) {\n      const buffer = [lotteryChar, ...this.salt, ...lastAlphabet]\n      const nextAlphabet = shuffle(\n        lastAlphabet,\n        buffer.slice(0, lastAlphabet.length),\n      )\n      result.push(fromAlphabet(Array.from(subId), nextAlphabet))\n      lastAlphabet = nextAlphabet\n    }\n\n    // if the result is different from what we'd expect, we return an empty result (malformed input):\n    if (this._encode(result).join('') !== id) return []\n    return result\n  }\n}\n\nconst minAlphabetLength = 16\nconst sepDiv = 3.5\nconst guardDiv = 12\n\nexport const keepUnique = <T>(content: Iterable<T>): T[] =>\n  Array.from(new Set(content))\n\nexport const withoutChars = (\n  chars: string[],\n  withoutChars: string[],\n): string[] => chars.filter((char) => !withoutChars.includes(char))\n\nexport const onlyChars = (chars: string[], keepChars: string[]): string[] =>\n  chars.filter((char) => keepChars.includes(char))\n\nconst isIntegerNumber = (n: NumberLike | string) =>\n  typeof n === 'bigint' ||\n  (!Number.isNaN(Number(n)) && Math.floor(Number(n)) === n)\n\nconst isPositiveAndFinite = (n: NumberLike) =>\n  typeof n === 'bigint' || (n >= 0 && Number.isSafeInteger(n))\n\nfunction shuffle(alphabetChars: string[], saltChars: string[]): string[] {\n  if (saltChars.length === 0) {\n    return alphabetChars\n  }\n\n  let integer: number\n  const transformed = alphabetChars.slice()\n\n  for (let i = transformed.length - 1, v = 0, p = 0; i > 0; i--, v++) {\n    v %= saltChars.length\n    p += integer = saltChars[v].codePointAt(0)!\n    const j = (integer + v + p) % i\n\n    // swap characters at positions i and j\n    const a = transformed[i]\n    const b = transformed[j]\n    transformed[j] = a\n    transformed[i] = b\n  }\n\n  return transformed\n}\n\nconst toAlphabet = (input: NumberLike, alphabetChars: string[]): string[] => {\n  const id: string[] = []\n\n  if (typeof input === 'bigint') {\n    const alphabetLength = BigInt(alphabetChars.length)\n    do {\n      id.unshift(alphabetChars[Number(input % alphabetLength)])\n      input = input / alphabetLength\n    } while (input > BigInt(0))\n  } else {\n    do {\n      id.unshift(alphabetChars[input % alphabetChars.length])\n      input = Math.floor(input / alphabetChars.length)\n    } while (input > 0)\n  }\n\n  return id\n}\n\nconst fromAlphabet = (\n  inputChars: string[],\n  alphabetChars: string[],\n): NumberLike =>\n  inputChars.reduce((carry, item) => {\n    const index = alphabetChars.indexOf(item)\n    if (index === -1) {\n      throw new Error(\n        `The provided ID (${inputChars.join(\n          '',\n        )}) is invalid, as it contains characters that do not exist in the alphabet (${alphabetChars.join(\n          '',\n        )})`,\n      )\n    }\n    if (typeof carry === 'bigint') {\n      return carry * BigInt(alphabetChars.length) + BigInt(index)\n    }\n    const value = carry * alphabetChars.length + index\n    const isSafeValue = Number.isSafeInteger(value)\n    if (isSafeValue) {\n      return value\n    } else {\n      if (typeof BigInt === 'function') {\n        return BigInt(carry) * BigInt(alphabetChars.length) + BigInt(index)\n      } else {\n        // we do not have support for BigInt:\n        throw new Error(\n          `Unable to decode the provided string, due to lack of support for BigInt numbers in the current environment`,\n        )\n      }\n    }\n  }, 0 as NumberLike)\n\nconst safeToParseNumberRegExp = /^\\+?[0-9]+$/\nconst safeParseInt10 = (str: string) =>\n  safeToParseNumberRegExp.test(str) ? parseInt(str, 10) : NaN\n\nconst splitAtIntervalAndMap = <T>(\n  str: string,\n  nth: number,\n  map: (n: string) => T,\n): T[] =>\n  Array.from<never, T>({length: Math.ceil(str.length / nth)}, (_, index) =>\n    map(str.slice(index * nth, (index + 1) * nth)),\n  )\n\nconst makeAnyOfCharsRegExp = (chars: string[]) =>\n  new RegExp(\n    chars\n      .map((char) => escapeRegExp(char))\n      // we need to sort these from longest to shortest,\n      // as they may contain multibyte unicode characters (these should come first)\n      .sort((a, b) => b.length - a.length)\n      .join('|'),\n  )\n\nconst makeAtLeastSomeCharRegExp = (chars: string[]) =>\n  new RegExp(\n    `^[${chars\n      .map((char) => escapeRegExp(char))\n      // we need to sort these from longest to shortest,\n      // as they may contain multibyte unicode characters (these should come first)\n      .sort((a, b) => b.length - a.length)\n      .join('')}]+$`,\n  )\n\nconst escapeRegExp = (text: string) =>\n  text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&')\n","async function random(length) {\n    var result           = '';\n    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var charactersLength = characters.length;\n    for ( var i = 0; i < length; i++ ) {\n       result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n    return result;\n };\n\n async function random_number(length) {\n   var result           = '';\n   var characters       = '0123456789';\n   var charactersLength = characters.length;\n   for ( var i = 0; i < length; i++ ) {\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\n   }\n   return result;\n};\n \n export {random,random_number} ;\n","import app from './firebase';\nimport firebase from 'firebase';\nimport { random } from 'src/utils/stringutil';\n\nexport const addGroup = async (data) => {\n  try {\n    var checkGroup = await app.firestore().collection('groups').where('hash_id', '==', data.hash_id).get();\n    if (checkGroup.docs.length > 0) {\n      return 'error';\n    } else {\n      var result = await app.firestore().collection('groups').add(data);\n      return 'success';\n    }\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const getClassApi = async (id) => {\n  try {\n    let querySnapshot = await app.firestore().collection('classes').doc(id).get();\n    const classes = querySnapshot.data();\n    classes.id = id;\n    return classes;\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const updateClass = async (data) => {\n  try {\n    console.log(data);\n    let id = data.id;\n    let result = await app.firestore().collection('classes').doc(id).update(data);\n\n    return result;\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const listGroup = async (userId) => {\n  try {\n    let querySnapshot = await app.firestore().collection('groups').where('created_by', '==', userId).get();\n    if (querySnapshot.docs) {\n      const groups = querySnapshot.docs.map((doc) => {\n        return {\n          id: doc.id,\n          ...doc.data()\n        };\n      });\n      return groups;\n    }\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const deletegroups = async (school_id) => {\n  try {\n    let querySnapshot = await app.firestore().collection('schools').doc(school_id).get();\n    const dclasses = await querySnapshot.data().classes;\n    let a = [];\n    for await (let val of dclasses) {\n      const doc = await val.get();\n      a[doc.id] = { id: doc.id, ...doc.data() };\n    }\n    return a;\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const listMembers = async (groupId) => {\n  try {\n    let querySnapshot = await app.firestore().collection('groups').doc(groupId).collection('group_members').get();\n    const members = querySnapshot.docs.map((doc) => {\n      return { id: doc.id, ...doc.data() }\n    })\n    return members\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const kickMember = async (school_id) => {\n  try {\n    let querySnapshot = await app.firestore().collection('schools').doc(school_id).get();\n    const dclasses = await querySnapshot.data().classes;\n    let a = [];\n    for await (let val of dclasses) {\n      const doc = await val.get();\n      a[doc.id] = { id: doc.id, ...doc.data() };\n    }\n    return a;\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const test1 = async () => {\n  try {\n    var myReviews = firebase.firestore().collectionGroup('users').where('assignments.status', '==', 0);\n    myReviews.get().then(function (querySnapshot) {\n      // Do something with these reviews!\n      console.log(querySnapshot.size());\n    })\n  } catch (err) {\n    console.log(err);\n  }\n};\n\n\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\nimport { useSnackbar } from 'notistack';\nimport {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  Grid,\n  TextField,\n  makeStyles,\n  Tooltip\n} from '@material-ui/core';\nimport wait from 'src/utils/wait';\nimport {addGroup} from '../../../api/groups.js';\nimport { useHistory } from 'react-router-dom';\nimport useAuth from 'src/hooks/useAuth';\nimport Hashids from 'hashids'\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nconst GroupCreateForm = ({\n  className,\n  ...rest\n}) => {\n\n  const classes = useStyles();\n  const history = useHistory();\n  const { enqueueSnackbar } = useSnackbar();\n  const { user } = useAuth();\n  const hashids = new Hashids();\n    return (\n    <Formik\n    initialValues={{\n      name: '',\n      hash_id:hashids.encode(parseInt(new Date().getTime()/ 1000)),\n      submit: null\n    }}\n      validationSchema={Yup.object().shape({\n        name: Yup.string().max(255).required('Name is required'),\n        hash_id: Yup.string().max(15),\n      })}\n      onSubmit={async (values, {\n        resetForm,\n        setErrors,\n        setStatus,\n        setSubmitting\n      }) => {\n        try {\n          values.name = values.name.replace(/\\s/g, '');\n          values.created_by =  user.userId;\n          values.created_at =  new Date();\n          const result = await addGroup(values);\n          console.log(result);\n          // NOTE: Make API request\n          await wait(500);\n          if(result == 'success'){\n            enqueueSnackbar('Group create', {\n              variant: 'success',\n              action: <Button>See all</Button>\n            });\n            history.push('/teacher/management/groups');\n          }else{\n            enqueueSnackbar('Group create', {\n              variant: 'error',\n              action: <Button>See all</Button>\n            });\n          }\n        } catch (err) {\n          console.error(err);\n          setStatus({ success: false });\n          setErrors({ submit: err.message });\n          setSubmitting(false);\n        }\n      }}\n    >\n      {({\n        errors,\n        handleBlur,\n        handleChange,\n        handleSubmit,\n        isSubmitting,\n        touched,\n        values\n      }) => (\n        <form className={clsx(classes.root, className)} onSubmit={handleSubmit}{...rest}>\n          <Card>\n            <CardContent>\n              <Grid container spacing={3}>\n                <Grid item md={6} xs={12}>\n                  <TextField\n                    error={Boolean(touched.name && errors.name)}\n                    fullWidth\n                    helperText={touched.name && errors.name}\n                    label=\"Tên Nhóm\"\n                    name=\"name\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    required\n                    value={values.name}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid item md={6} xs={12}>\n                  <TextField\n                    error={Boolean(touched.hash_id && errors.hash_id)}\n                    fullWidth\n                    helperText={touched.hash_id && errors.hash_id}\n                    label=\"Mã nhóm\"\n                    name=\"hash_id\"\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                    required\n                    value={values.hash_id}\n                    variant=\"outlined\"\n                    disabled\n                  />\n                </Grid>\n                <Grid item />\n\n              </Grid>\n              <Box mt={2}>\n                <Button\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  type=\"submit\"\n                  disabled={isSubmitting}\n                >\n                  Lưu\n                </Button>\n              </Box>\n            </CardContent>\n          </Card>\n        </form>\n      )}\n    </Formik>\n  );\n};\n\nGroupCreateForm.propTypes = {\n  className: PropTypes.string\n};\n\nexport default GroupCreateForm;\n","import React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport {\n  Breadcrumbs,\n  Link,\n  Typography,\n  makeStyles\n} from '@material-ui/core';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nconst Header = ({ className, ...rest }) => {\n  let schoolname = localStorage.getItem('schoolname');\n  const classes = useStyles();\n\n  return (\n    <div\n      className={clsx(classes.root, className)}\n      {...rest}\n    >\n      <Breadcrumbs\n        separator={<NavigateNextIcon fontSize=\"small\" />}\n        aria-label=\"breadcrumb\"\n      >\n        <Link\n            variant=\"body1\"\n            color=\"inherit\"\n            to=\"/hbon/management/schools\"\n            component={RouterLink}\n          >\n            Trường: {schoolname}\n          </Link>\n          <Link\n            variant=\"body1\"\n            color=\"inherit\"\n            to=\"/school/management/classes\"\n            component={RouterLink}\n          >\n            Lớp học\n          </Link>\n      </Breadcrumbs>\n      <Typography\n          variant=\"h3\"\n          color=\"textPrimary\"\n        >\n          Thêm lớp học\n        </Typography>\n    </div>\n  );\n};\n\nHeader.propTypes = {\n  className: PropTypes.string\n};\n\nexport default Header;\n","import React from 'react';\nimport {\n  Box,\n  Container,\n  makeStyles\n} from '@material-ui/core';\nimport Page from 'src/components/Page';\nimport GroupCreateForm from './GroupCreateForm';\nimport Header from './Header';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    backgroundColor: theme.palette.background.dark,\n    minHeight: '100%',\n    paddingTop: theme.spacing(3),\n    paddingBottom: theme.spacing(3)\n  }\n}));\n\nconst GroupCreateView = (props) => {\n\n  const classes = useStyles();\n  return (\n    <Page className={classes.root} title=\"Thêm Nhóm\">\n      <Container maxWidth={false}>\n        <Header />\n      </Container>\n      <Box mt={3}>\n        <Container maxWidth=\"lg\">\n          <GroupCreateForm />\n        </Container>\n      </Box>\n    </Page>\n  );\n};\n\nexport default GroupCreateView;\n"],"sourceRoot":""}